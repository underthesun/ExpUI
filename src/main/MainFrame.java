/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import communication.CommunicationTool;
import communication.Message;
import java.awt.Color;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import components.Node;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import util.ProcessSim;
import util.ProcessUtils;

/**
 *
 * @author b1106
 */
public class MainFrame extends javax.swing.JFrame {

    CommunicationTool communicationTool;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        communicationTool = new CommunicationTool(this);
        queryPanel.setNodePanel(nodePanel);

        File openFile = new File("processgraph.json");
        if (openFile != null) {
            nodePanel.removeAll();
            ProcessUtils.fromFile(openFile, nodePanel);
        }
        communicationTool.requestProcessOnline();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        nodePanel = new main.NodePanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taRegister = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        taHeartbeat = new javax.swing.JTextArea();
        integrityPanel = new main.IntegrityPanel();
        queryPanel = new main.QueryPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("实验测试");
        setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout nodePanelLayout = new javax.swing.GroupLayout(nodePanel);
        nodePanel.setLayout(nodePanelLayout);
        nodePanelLayout.setHorizontalGroup(
            nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 992, Short.MAX_VALUE)
        );
        nodePanelLayout.setVerticalGroup(
            nodePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(nodePanel);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.setFont(new java.awt.Font("宋体", 1, 16)); // NOI18N
        jTabbedPane1.setInheritsPopupMenu(true);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(100, 400));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel1.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "注册记录", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("宋体", 1, 14))); // NOI18N

        taRegister.setColumns(20);
        taRegister.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        taRegister.setRows(5);
        jScrollPane2.setViewportView(taRegister);

        jPanel1.add(jScrollPane2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "心跳记录", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("宋体", 1, 14))); // NOI18N

        taHeartbeat.setColumns(20);
        taHeartbeat.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        taHeartbeat.setRows(5);
        jScrollPane3.setViewportView(taHeartbeat);

        jPanel1.add(jScrollPane3);

        jTabbedPane1.addTab("过程图维护", jPanel1);
        jTabbedPane1.addTab("数据完整性验证", integrityPanel);
        jTabbedPane1.addTab("分布式查询处理", queryPanel);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.SOUTH);

        jMenu1.setText("菜单");
        jMenu1.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N

        jMenuItem2.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        jMenuItem2.setText("打开过程图");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setFont(new java.awt.Font("宋体", 0, 16)); // NOI18N
        jMenuItem1.setText("完整性验证模拟");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        nodePanel.colorResest();
        integrityPanel.init(nodePanel);
        communicationTool.intStart();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        openNodeStructure();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        int indexSelected = jTabbedPane1.getSelectedIndex();
        switch (indexSelected) {
            case 0:
                taRegister.setText("");
                communicationTool.requestProcessOnline();
                break;
            case 1:
                for (Node node : nodePanel.getNodes()) {
                    if (!node.getBackground().equals(Color.red)) {
                        nodePanel.colorResest(node);
                    }
                }
                break;
            case 2:
                nodePanel.colorResest();
                break;
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        communicationTool.sendKill();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private main.IntegrityPanel integrityPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private main.NodePanel nodePanel;
    private main.QueryPanel queryPanel;
    private javax.swing.JTextArea taHeartbeat;
    private javax.swing.JTextArea taRegister;
    // End of variables declaration//GEN-END:variables

    public void openNodeStructure() {
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File openFile = fc.getSelectedFile();
            if (openFile != null) {
                nodePanel.removeAll();
//                jScrollPane1.setViewportView(nodePanel);
                ProcessUtils.fromFile(openFile, nodePanel);
            }
        }
//        File file = new File("processgraph.json");
//        ProcessUtils.fromFile(file, nodePanel);
    }

    public void processOnline(Set<ProcessSim> processSims) {
        Set<Integer> ids = new HashSet<Integer>();
        for (ProcessSim processSim : processSims) {
            register(processSim);
            ids.add(processSim.getId());
        }

        for (Node n : nodePanel.getNodes()) {
            if (!ids.contains(n.getId())) {
                nodePanel.colorResest(n);
            }
        }
    }

    public void register(ProcessSim processSim) {
        //set background color
        Node node = getNode(processSim.getId());
        if (node != null) {
            node.setBackground(Color.green);
            //add register information
//            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String str = "[" + sdf.format(new Date(processSim.getRegTime())) + "]: 过程【" + node.getText() + "】注册成功!" + "\n";
            taRegister.append(str);
        }
    }

    public void heartbeat(int pid) {
        Node node = getNode(pid);
        //add heartbeat information
        if (node != null) {
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String str = "[" + sdf.format(cal.getTime()) + "]: 收到过程【" + node.getText() + "】心跳信息!" + "\n";
            taHeartbeat.append(str);
        }
    }

    public void intReport(int pid, String errType) {
        Node node = getNode(pid);
        if (node != null) {
            if (errType.equals(Message.INT_ERROR_QTY)) {
                node.setBackground(Color.red);
                showWarning("过程" + node.getText() + "检测到数目错误", "报警", JOptionPane.WARNING_MESSAGE);
            } else if (errType.equals(Message.INT_ERROR_UNI)) {
                node.setBackground(Color.red);
                showWarning("过程" + node.getText() + "检测到唯一性错误", "报警", JOptionPane.WARNING_MESSAGE);
            } else if (errType.equals(Message.INT_ERROR_CTM)) {
                node.setBackground(Color.red);
                showWarning("过程" + node.getText() + "检测到包含关系错误", "报警", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    public void intEcho(int pid, String data) {
        integrityPanel.appendResult(getNodeProcessId(pid), data);
    }

    private Node getNode(int pid) {
        Node node = null;
        for (Node n : nodePanel.getNodes()) {
            if (n.getId() == pid) {
                node = n;
                break;
            }
        }
        return node;
    }

    private int getNodeProcessId(int pid) {
        return getNode(pid).getProID();
    }

    private void showWarning(String message, String title, int mesType) {
        JOptionPane.showOptionDialog(null, message, title, JOptionPane.OK_CANCEL_OPTION, mesType, null, new Object[]{"确定"}, "确定");
    }
}
